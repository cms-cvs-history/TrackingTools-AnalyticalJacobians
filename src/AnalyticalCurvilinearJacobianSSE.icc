
void
AnalyticalCurvilinearJacobian::computeFullJacobian
(const GlobalTrajectoryParameters& globalParameters,
 const GlobalPoint& x, 
 const GlobalVector& p, 
 const GlobalVector& h, 
 const double& s)
{    

  using mathSSE::Vec3D;
  using mathSSE::Vec2D;

  //GlobalVector p1 = fts.momentum().unit();
  GlobalVector p1 = globalParameters.momentum().unit();
  GlobalVector p2 = p.unit();
  //GlobalPoint xStart = fts.position();
  GlobalPoint xStart = globalParameters.position();
  GlobalVector dxf = xStart - x;
  //GlobalVector h  = MagneticField::inInverseGeV(xStart);
  // Martijn: field is now given as parameter.. GlobalVector h  = globalParameters.magneticFieldInInverseGeV(xStart);

  //double qbp = fts.signedInverseMomentum();
  double qbp = globalParameters.signedInverseMomentum();
  double absS = s;
  
  // calculate transport matrix
  // Origin: TRPRFN
  Vec3D t1(p1.x(),p1.y(), p1.z());
  Vec3D t2(p2.x(),p2.y(), p2.z());
  double cosl0 = p1.perp(); double cosl1 = 1./p2.perp();

  // define average magnetic field and gradient 
  // at initial point - inlike TRPRFN
  GlobalVector hnf = h.unit();
  double qp = -h.mag();
  //   double q = -h.mag()*qbp;
  double q = qp*qbp;

  double theta = q*absS; double sint = sin(theta); double cost = cos(theta);

  Vec3D hn(hnf.x(),hnf.y(),hnf.z());
  Vec3D dx(dxf.x(),dxf.y(),dxf.z());

  double gamma = dot(hn,t2);
  Vec3D an = cross(hn,t2);

  const __m128d neg = _mm_set_pd ( 0.0 , -0.0 );

  __m128d t = _mm_mul_pd(t1.vec[0],t1.vec[0]);
  t = _mm_sqrt_pd(_mm_add_pd(t,_mm_shuffle_pd(t,t,1)));
  Vec2D u1(_mm_xor_pd(neg,_mm_div_pd(_mm_shuffle_pd(t1.vec[0],t1.vec[0],1),t)));
  Vec3D u13(u1.vec, _mm_setzero_pd());
  Vec3D v1 = cross(t1,u13);

  t = _mm_mul_pd(t2.vec[0],t2.vec[0]);
  t = _mm_sqrt_pd(_mm_add_pd(t,_mm_shuffle_pd(t,t,1)));
  Vec2D u2(_mm_xor_pd(neg,_mm_div_pd(_mm_shuffle_pd(t2.vec[0],t2.vec[0],1),t)));
  Vec3D u23(u2.vec, _mm_setzero_pd());
  Vec3D v2 = cross(t2,u23);


  // now prepare the transport matrix
  // pp only needed in high-p case (WA)
//   double pp = 1./qbp;
////    double pp = fts.momentum().mag();
// moved up (where -h.mag() is needed()
//   double qp = q*pp;

  double anv = -dot(hn,u23);
  double anu =  dot(hn,v2);

  double omcost = 1. - cost; double tmsint = theta - sint;
  
  
  Vec3D hu = cross(hn,u13);
  Vec3D hv = cross(hn,v1);

  
  //   1/p - doesn't change since |p1| = |p2|
  
  //   lambda
  
  theJacobian(1,0) = -qp*anv*dot(t2,dx);
  
  theJacobian(1,1) = 
    cost* dot(v1,v2) +
    sint*dot(hv,v2) +
    omcost*dot(hn,v1) * dot(hn,v2) +
    anv*(-sint*dot(v1,t2) +
	 omcost*dot(v1,an) -
	 tmsint*gamma*dot(hn,v1)
	 )
    ;

  theJacobian(1,2) = 
    cost*dot(u1,v2) +
    sint*dot(hu,v2) +
    omcost*dot(hn,u1) * dot(hn,v2) +
    anv*(-sint*dot(u1,t2.xy()) +
	 omcost*dot(u1,an.xy())  -
	 tmsint*gamma*dot(hn.xy(),u1)
	 )
    ;
  theJacobian(1,2) *= cosl0;

  theJacobian(1,3) = -q*anv*dot(u1,t2.xy());

  theJacobian(1,4) = -q*anv*dot(v1,t2);

  //   phi

  theJacobian(2,0) = -qp*anu*cosl1*dot(t2,dx);

  theJacobian(2,1) = 
    cost*dot(v1.xy(),u2) +
    sint*dot(hv.xy(),u2) +
    omcost*dot(hn,v1)*dot(hn.xy(),u2) +
    anu*(-sint*dot(v1,t2) +
	 omcost*dot(v1,an) -
	 tmsint*gamma*dot(hn,v1)
	 )
    ;
  theJacobian(2,1) *= cosl1;

  theJacobian(2,2) = 
    cost*dot(u1,u2) +
    sint*dot(hu.xy(),u2) +
    omcost*dot(hn.xy(),u1)*dot(hn.xy(),u2) +
    anu*(-sint*dot(u1,t2.xy()) +
	 omcost*dot(u1,an.xy()) -
	 tmsint*gamma*dot(hn.xy(),u1)
	 )
    ;
  theJacobian(2,2) *= cosl1*cosl0;

  theJacobian(2,3) = -q*anu*cosl1*dot(u1,t2.xy());

  theJacobian(2,4) = -q*anu*cosl1*dot(v1,t2);

  //   yt

  //double cutCriterion = abs(s/fts.momentum().mag());
  double cutCriterion = fabs(s/globalParameters.momentum().mag());
  const double limit = 5.; // valid for propagations with effectively float precision

  if (cutCriterion > limit) {
    double pp = 1./qbp;
    theJacobian(3,0) = pp*dot(u2,dx.xy());
    theJacobian(4,0) = pp*dot(v2,dx);
  }
  else {
    Vec3D hp1 = cross(hn,t1);
    double temp1 = dot(hp1.xy(),u2);
    double s2 = s*s;
    double secondOrder41 = 0.5 * qp * temp1 * s2;
    Vec3D ghnmp = gamma*hn - t1;
    double temp2 = dot(ghnmp,u2.xy());
    double s3 = s2 * s;
    double s4 = s3 * s;
    double h1 = h.mag();
    double h2 = h1 * h1;
    double h3 = h2 * h1;
    double qbp2 = qbp * qbp;
    double thirdOrder41 = 1./3 * h2 * s3 * qbp * temp2;
    double fourthOrder41 = 1./8 * h3 * s4 * qbp2 * temp1;
    theJacobian(3,0) = secondOrder41 + (thirdOrder41 + fourthOrder41);

    double temp3 =dot(hp1,v2);
    double secondOrder51 = 0.5 * qp * temp3 * s2;
    double temp4 = dot(ghnmp,v2);
    double thirdOrder51 = 1./3 * h2 * s3 * qbp * temp4;
    double fourthOrder51 = 1./8 * h3 * s4 * qbp2 * temp3;
    theJacobian(4,0) = secondOrder51 + (thirdOrder51 + fourthOrder51);
  }

  theJacobian(3,1) = (sint*dot(v1.xy(),u2) +
		      omcost*dot(hv.xy(),u2) +
		      tmsint*dot(hn.xy(),u2) *
		      dot(hn,v1))/q;

  theJacobian(3,2) = (sint*dot(u1,u2) +
		      omcost*dot(hu.xy(),u2) +
		      tmsint*dot(hn.xy(),u2) *
		      dot(hn.xy(),u1))*cosl0/q;

  theJacobian(3,3) = dot(u1,u2);
  
  theJacobian(3,4) = dot(v1.xy(),u2);

  //   zt

  theJacobian(4,1) = (sint*dot(v1,v2) +
		      omcost*dot(hv,v2) +
		      tmsint*dot(hn,v2) *
		      dot(hn,v1))/q;

  theJacobian(4,2) = (sint*dot(u1,v2.xy()) +
		      omcost*dot(hu,v2) +
		      tmsint*dot(hn,v2) *
		      dot(hn.xy(),u1))*cosl0/q;

  theJacobian(4,3) = dot(u1,v2.xy()); 

  theJacobian(4,4) = dot(v1,v2);
  // end of TRPRFN
}
